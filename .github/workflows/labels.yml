name: Trac Ticket Validation
on:
  pull_request_target:
    types: [edited, opened, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: write
  issues: write

jobs:
  ticket_validation:
    name: Validate Trac Tickets and apply labels
    runs-on: ubuntu-latest
    steps:
      - name: Validate and label
        uses: actions/github-script@v7
        env:
          TRAC_API: "https://code.djangoproject.com/jsonrpc"
        with:
          script: |
            const title = context.payload.pull_request.title;
            const regex = /#[0-9]+[ ,:]?/gm;
            const label = "no ticket";
            const hasMatch = regex.test(title);
            const labels = context.payload.pull_request.labels.map(l => l.name);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr_number = context.payload.pull_request.number;
            console.log(`=> Pull Request Title: ${title}`);
            console.log(`=> Labels on PR: [${labels}]`);

            async function validateTicket() {
              if (!hasMatch) {
                if (!labels.includes(label)) {
                  await addLabel(label);
                }
                return;
              }

              const ticketId = title.match(regex)?.[0].replace(/[ ,:]/g, '').substring(1);

              try {
                const response = await fetch(process.env.TRAC_API, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    jsonrpc: "2.0",
                    method: "ticket.get",
                    params: [parseInt(ticketId)],
                    id: 1
                  })
                });
                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                const data = await response.json();
                if (data.error) {
                  await handleInvalidTicket(ticketId, data.error.message);
                  return;
                }
                if (!data.result?.[3]?.type) {
                  throw new Error('Invalid ticket data structure');
                }
                const ticketType = data.result[3].type.toLowerCase();
                await handleValidTicket(ticketType);
              } catch (error) {
                console.error('Validation failed:', error);
                await handleInvalidTicket(ticketId, error.message);
              }
            }

            async function handleInvalidTicket(ticketId, reason) {
              await removeLabel('no ticket');
              if (!labels.includes('invalid ticket')) {
                await addLabel('invalid ticket');
              }
              await postComment(
                `**Ticket Validation Failed**\n` +
                `Could not verify #${ticketId}: ${reason}\n` +
                `• Verify ticket exists: https://code.djangoproject.com/ticket/${ticketId}\n` +
                `• Create new ticket: https://code.djangoproject.com/newticket`
              );
            }

            async function handleValidTicket(ticketType) {
              await removeLabel('no ticket');
              await removeLabel('invalid ticket');

              const TYPE_LABELS = {
                'defect': 'type: Bug',
                'enhancement': 'type: New Feature',
                'task': 'type: Cleanup/Optimization'
              };
              const label = TYPE_LABELS[ticketType] || 'type: Other';
              await syncLabels(label);
            }

            async function syncLabels(newLabel) {
              const typePrefix = 'type: ';
              const currentLabels = labels.map(l => l.name);

              for (const label of currentLabels.filter(n => n.startsWith(typePrefix))) {
                if (label !== newLabel) await removeLabel(label);
              }

              if (!currentLabels.includes(newLabel)) {
                await addLabel(newLabel);
              }
            }

            async function addLabel(label) {
              await github.rest.issues.addLabels({
                owner, repo, issue_number: pr_number,
                labels: [label]
              });
            }

            async function removeLabel(label) {
              try {
                await github.rest.issues.removeLabel({
                  owner, repo, issue_number: pr_number,
                  name: label
                });
              } catch (error) {
                if (error.status !== 404) throw error;
              }
            }

            async function postComment(message) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pr_number,
                body: message
              });
            }

            await validateTicket();